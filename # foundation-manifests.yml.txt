# foundation-manifests.yml
east-1-dev1:
  - manifest-dev1-east1.yml
east-2-dev1:
  - manifest-dev1-east2.yml
dev-east:
  - manifest-dev-east.yml
dev-west:
  - manifest-dev-west.yml
qa-east:
  - manifest-qa-east.yml
qa-west:
  - manifest-qa-west.yml
qa-dal:
  - manifest-qa-dal.yml
qa-phx:
  - manifest-qa-phx.yml
uat-east:
  - manifest-uat-east.yml
uat-west:
  - manifest-uat-west.yml
uat-dal:
  - manifest-uat-dal.yml
uat-phx:
  - manifest-uat-phx.yml
prod-dal:
  - manifest-prod-dal.yml
prod-phx:
  - manifest-prod-phx.yml




---------------

stage('Load foundation manifests') {
    logStage('load-foundation-manifests')
    steps {
        script {
            // Load YAML from shared library resources
            def yamlText = libraryResource 'foundation-manifests.yml'
            def foundationManifests = readYaml text: yamlText

            // Resolve manifest(s) based on PCF Foundation parameter
            def manifestList = foundationManifests[pcfFoundation]

            if (!manifestList) {
                error "❌ No manifest mapping found for PCF foundation: ${pcfFoundation}"
            }

            // Convert list to comma-separated string for env variable
            env.PCF_MANIFEST_LIST = manifestList.join(',')
            echo "✅ Resolved manifest(s) for ${pcfFoundation}: ${env.PCF_MANIFEST_LIST}"
        }
    }
}


-----------------


stage('validate: manifest') {
    logStage('validate-manifest')
    steps {
        script {
            def manifestList = env.PCF_MANIFEST_LIST.split(',').collect { it.trim() }

            manifestList.each { manifestFile ->
                echo "🔍 Validating manifest: ${manifestFile}"
                if (fileExists(manifestFile)) {
                    validateSplunkIndex(manifestFile, 'prod')
                } else {
                    buildFailed("❌ No manifest file found: ${manifestFile}")
                }
            }
        }
    }
}


------------


stage('udeploy: import-artifact') {
    logStage('udeploy-import-artifact')
    steps {
        script {
            def manifestList = env.PCF_MANIFEST_LIST.split(',').collect { it.trim() }

            manifestList.each { manifest ->
                echo "🚀 Importing artifact with manifest: ${manifest}"
                if (!fileExists(manifest)) {
                    error "❌ Manifest file not found during import: ${manifest}"
                }
                uDeployDevVersionImport(gitRepositoryName, appVersion, manifest, pcfRoute)
            }
        }
    }
}
